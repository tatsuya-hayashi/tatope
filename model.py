# generated by datamodel-codegen:
#   filename:  tatope_v1.json
#   timestamp: 2025-04-25T05:33:51+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Extra, Field


class Spec(BaseModel):
    class Config:
        extra = Extra.forbid

    foo: Optional[str] = Field(
        None,
        description='Foo is an example field of TatOpe. Edit tatope_types.go to remove/update',
    )
    hoge: str
    ports: Optional[List[int]] = None


class Status(BaseModel):
    class Config:
        extra = Extra.forbid

    state: Optional[str] = None


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        None,
        description='APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        None,
        description='Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Optional[Spec] = Field(
        None, description='TatOpeSpec defines the desired state of TatOpe'
    )
    status: Optional[Status] = Field(
        None, description='TatOpeStatus defines the observed state of TatOpe'
    )